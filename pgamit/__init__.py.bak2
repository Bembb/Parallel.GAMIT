"""
pgamit: a Python wrapper to parallelize GAMIT executions
"""

from . import pyRinexName
from . import Utils
from . import pyClk
from . import pyJobServer
from . import pyParseAntex
from . import pyStatic1d
from . import snxParse
from . import pyCompress
from . import pyLeastSquares
from . import pyProducts
from . import pyStationInfo
from . import dbConnection
from . import pyDate
from . import pyOTL
from . import pyRinex
from . import pyTerminal
from . import pyArchiveStruct
from . import pyEOP
from . import pyOkada
from . import pyTrimbleT0x
from . import pyBrdc
from . import pyETM
from . import pyOptions
from . import pyRunWithRetry
from . import pyVoronoi
from . import pyBunch
from . import pyEvents
from . import pyPPP
from . import pySp3
from . import pyZTD
from . import pyNEQStack
from . import pyStack

from . import pyGamitConfig

from . import GenerateKml
from . import pyParallelGamit
from . import WeeklyCombination




from . import AlterETM
from . import DownloadSourcesFill
from . import ReadPackage
from . import ApplyCountryCode
from . import GenerateSinex
from . import Read_Mfile
from . import ArchiveService
from . import IntegrityCheck
from . import ScanArchive
from . import amend
from . import CloseStationInfo
from . import LocateRinex
from . import StationInfoEdit
from . import aws_sync
from . import CompareDBs
from . import OTL_FES2014b
from . import SyncOrbits
from . import gamit_stats
from . import ConvertDate
from . import PlotETM
from . import TrajectoryFit
from . import load_g2_aprs
from . import ConvertTrimble
from . import PlotMapView
from . import UpdateEarthquakes
from . import test_proc
from . import DownloadSources
from . import QueryETM
from . import Ztd2trp
from . import FixPlate
from . import pyDRA

from . import pyGamitSession
from . import pyGamitTask
from . import pyGlobkTask
from . import pyNetwork
from . import pyParseZTD
from . import pyStation
from . import Stacker
from . import StationList
from . import test_voronoi


'''
__all__ = [
from . import "classes"
from . import "com"]
'''

__all__ = [
    'pyRinexName',
    'Utils',
    'pyClk',
    'pyParseAntex',
    'pyStatic1d',
    'snxParse',
    'pyCompress',
    'pyLeastSquares',
    'pyProducts',
    'pyStationInfo',
    'dbConnection',
    'pyDate',
    'pyOTL',
    'pyRinex',
    'pyTerminal',
    'pyArchiveStruct',
    'pyEOP',
    'pyOkada',
    'pyTrimbleT0x',
    'pyBrdc',
    'pyETM',
    'pyOptions',
    'pyRunWithRetry',
    'pyVoronoi',
    'pyBunch',
    'pyEvents',
    'pyPPP',
    'pySp3',
    'pyZTD',
    'pyNEQStack',
    'pyStack',
    'GenerateKml',
    'pyParallelGamit',
    'WeeklyCombination'
]



#from .classes import *
#
from pgamit.classes import pyRinexName
from pgamit.classes import Utils
from pgamit.classes import pyClk
#from .classes import pyJobServer
from pgamit.classes import pyParseAntex
from pgamit.classes import pyStatic1d
from pgamit.classes import snxParse
from pgamit.classes import pyCompress
from pgamit.classes import pyLeastSquares
from pgamit.classes import pyProducts
from pgamit.classes import pyStationInfo
from pgamit.classes import dbConnection
from pgamit.classes import pyDate
from pgamit.classes import pyOTL
from pgamit.classes import pyRinex
from pgamit.classes import pyTerminal
from pgamit.classes import pyArchiveStruct
from pgamit.classes import pyEOP
from pgamit.classes import pyOkada
from pgamit.classes import pyTrimbleT0x
from pgamit.classes import pyBrdc
from pgamit.classes import pyETM
from pgamit.classes import pyOptions
from pgamit.classes import pyRunWithRetry
from pgamit.classes import pyVoronoi
from pgamit.classes import pyBunch
from pgamit.classes import pyEvents
from pgamit.classes import pyPPP
from pgamit.classes import pySp3
from pgamit.classes import pyZTD
from pgamit.classes import pyNEQStack
from pgamit.classes import pyStack


from pgamit.classes import GenerateKml
from pgamit.classes import pyParallelGamit
from pgamit.classes import WeeklyCombination



#from .com import pyGamitConfig


# from .com import AlterETM
# from .com import DownloadSourcesFill
# from .com import ReadPackage
#
# #from .com import ApplyCountryCode
#
# from .com import GenerateSinex
#
# #from .com import Read_Mfile
#
# from .com import ArchiveService
# from .com import IntegrityCheck
# from .com import ScanArchive
# from .com import amend
# from .com import CloseStationInfo
# from .com import LocateRinex
# from .com import StationInfoEdit
# from .com import aws_sync
# from .com import CompareDBs
# from .com import OTL_FES2014b
# from .com import SyncOrbits
# from .com import gamit_stats
# from .com import ConvertDate
# from .com import PlotETM
# from .com import TrajectoryFit
# from .com import load_g2_aprs
# from .com import ConvertTrimble
# from .com import PlotMapView
# from .com import UpdateEarthquakes
# from .com import test_proc
# from .com import DownloadSources
# from .com import QueryETM
# from .com import Ztd2trp
# from .com import FixPlate
# from .com import pyDRA
#
# from .com import pyGamitSession
# from .com import pyGamitTask
# from .com import pyGlobkTask
# from .com import pyNetwork
# from .com import pyParseZTD
# from .com import pyStation
# from .com import Stacker
# from .com import StationList
# from .com import test_voronoi





__all__ = [
    'pyRinexName',
    'Utils',
    'pyClk',
    'pyParseAntex',
    'pyStatic1d',
    'snxParse',
    'pyCompress',
    'pyLeastSquares',
    'pyProducts',
    'pyStationInfo',
    'dbConnection',
    'pyDate',
    'pyOTL',
    'pyRinex',
    'pyTerminal',
    'pyArchiveStruct',
    'pyEOP',
    'pyOkada',
    'pyTrimbleT0x',
    'pyBrdc',
    'pyETM',
    'pyOptions',
    'pyRunWithRetry',
    'pyVoronoi',
    'pyBunch',
    'pyEvents',
    'pyPPP',
    'pySp3',
    'pyZTD',
    'pyNEQStack',
    'pyStack',
    'GenerateKml',
    'pyParallelGamit',
    'WeeklyCombination'
]




def __getattr__(name):
    if name == 'Utils':
        import importlib
        mod = importlib.import_module('pgamit.classes.Utils')
        return getattr(mod, 'Utils')
    elif name == 'function_in_submodule2':
        mod = importlib.import_module('mypkg.subfolder2.submodule2')
        return getattr(mod, 'function_in_submodule2')
    raise AttributeError(f"module {__name__} has no attribute {name}")
